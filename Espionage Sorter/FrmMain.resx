<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="NodeMenu.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        //+AAf//gAH//8AD///gB///8A////w///8=
</value>
  </data>
</root>